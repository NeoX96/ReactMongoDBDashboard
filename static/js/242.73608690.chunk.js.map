{"version":3,"file":"static/js/242.73608690.chunk.js","mappings":"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","sources":["../node_modules/@nivo/funnel/src/props.tsx","../node_modules/@nivo/funnel/src/PartTooltip.tsx","../node_modules/@nivo/funnel/src/hooks.ts","../node_modules/d3-shape/src/area.js","../node_modules/@nivo/funnel/src/Part.tsx","../node_modules/@nivo/funnel/src/Parts.tsx","../node_modules/@nivo/funnel/src/PartLabel.tsx","../node_modules/@nivo/funnel/src/PartLabels.tsx","../node_modules/@nivo/funnel/src/Separator.tsx","../node_modules/@nivo/funnel/src/Separators.tsx","../node_modules/@nivo/funnel/src/FunnelAnnotations.tsx","../node_modules/@nivo/funnel/src/Funnel.tsx","../node_modules/@nivo/funnel/src/ResponsiveFunnel.tsx"],"sourcesContent":["// @ts-ignore\nimport { MotionConfigProvider } from '@nivo/core'\nimport { FunnelLayerId } from './types'\n\nexport const svgDefaultProps = {\n    layers: ['separators', 'parts', 'labels', 'annotations'] as FunnelLayerId[],\n\n    direction: 'vertical' as const,\n    interpolation: 'smooth' as const,\n    spacing: 0,\n    shapeBlending: 0.66,\n\n    colors: { scheme: 'nivo' as const },\n    fillOpacity: 1,\n\n    borderWidth: 6,\n    borderColor: { from: 'color' },\n    borderOpacity: 0.66,\n\n    enableLabel: true,\n    labelColor: { theme: 'background' },\n\n    enableBeforeSeparators: true,\n    beforeSeparatorLength: 0,\n    beforeSeparatorOffset: 0,\n    enableAfterSeparators: true,\n    afterSeparatorLength: 0,\n    afterSeparatorOffset: 0,\n\n    annotations: [],\n\n    isInteractive: true,\n    currentPartSizeExtension: 0,\n\n    role: 'img',\n\n    animate: MotionConfigProvider.defaultProps.animate,\n    motionConfig: MotionConfigProvider.defaultProps.config,\n}\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { FunnelDatum, FunnelPartWithHandlers } from './types'\n\nexport interface PartTooltipProps<D extends FunnelDatum> {\n    part: FunnelPartWithHandlers<D>\n}\n\nexport const PartTooltip = <D extends FunnelDatum>({ part }: PartTooltipProps<D>) => (\n    <BasicTooltip\n        id={part.data.label}\n        value={part.formattedValue}\n        color={part.color}\n        enableChip={true}\n    />\n)\n","import { createElement, useMemo, useState, MouseEvent } from 'react'\nimport { line, area, curveBasis, curveLinear } from 'd3-shape'\nimport { ScaleLinear, scaleLinear } from 'd3-scale'\nimport { useInheritedColor, useOrdinalColorScale } from '@nivo/colors'\nimport { useTheme, useValueFormatter } from '@nivo/core'\nimport { useAnnotations } from '@nivo/annotations'\nimport { useTooltip, TooltipActionsContextData } from '@nivo/tooltip'\nimport { svgDefaultProps as defaults } from './props'\nimport { PartTooltip, PartTooltipProps } from './PartTooltip'\nimport {\n    FunnelDatum,\n    FunnelCommonProps,\n    FunnelDataProps,\n    FunnelPart,\n    SeparatorProps,\n    FunnelCustomLayerProps,\n    FunnelAreaGenerator,\n    FunnelAreaPoint,\n    FunnelBorderGenerator,\n    Position,\n} from './types'\n\nexport const computeShapeGenerators = <D extends FunnelDatum>(\n    interpolation: FunnelCommonProps<D>['interpolation'],\n    direction: FunnelCommonProps<D>['direction']\n): [FunnelAreaGenerator, FunnelBorderGenerator] => {\n    // area generator which is used to draw funnel chart parts\n    const areaGenerator: FunnelAreaGenerator = area<FunnelAreaPoint>()\n    if (direction === 'vertical') {\n        areaGenerator\n            .curve(interpolation === 'smooth' ? curveBasis : curveLinear)\n            .x0(d => d.x0)\n            .x1(d => d.x1)\n            .y(d => d.y)\n    } else {\n        areaGenerator\n            .curve(interpolation === 'smooth' ? curveBasis : curveLinear)\n            .y0(d => d.y0)\n            .y1(d => d.y1)\n            .x(d => d.x)\n    }\n\n    return [\n        areaGenerator,\n        // we're using a different line generator to draw borders, this way\n        // we we don't have borders joining each side of the parts.\n        // it's important to have an empty point when defining the points\n        // to be used along with this, otherwise we'll get a line between both sides.\n        line<Position | null>()\n            .defined(d => d !== null)\n            .x(d => d!.x)\n            .y(d => d!.y)\n            .curve(interpolation === 'smooth' ? curveBasis : curveLinear),\n    ]\n}\n\ninterface CustomBandScale {\n    (index: number): number\n    bandwidth: number\n}\n\nexport const computeScales = <D extends FunnelDatum>({\n    data,\n    direction,\n    width,\n    height,\n    spacing,\n}: {\n    data: FunnelDataProps<D>['data']\n    direction: FunnelCommonProps<D>['direction']\n    width: number\n    height: number\n    spacing: number\n}): [CustomBandScale, ScaleLinear<number, number>] => {\n    let bandScaleSize\n    let linearScaleSize\n    if (direction === 'vertical') {\n        bandScaleSize = height\n        linearScaleSize = width\n    } else {\n        bandScaleSize = width\n        linearScaleSize = height\n    }\n\n    const bandwidth = (bandScaleSize - spacing * (data.length - 1)) / data.length\n\n    // we're not using d3 band scale here to be able to get\n    // the actual paddingInner value in pixels, required to\n    // create centered separator lines between parts\n    const bandScale = (index: number) => spacing * index + bandwidth * index\n    bandScale.bandwidth = bandwidth\n\n    const allValues = data.map(d => d.value)\n\n    const linearScale = scaleLinear()\n        .domain([0, Math.max(...allValues)])\n        .range([0, linearScaleSize])\n\n    return [bandScale, linearScale]\n}\n\nexport const computeSeparators = <D extends FunnelDatum>({\n    parts,\n    direction,\n    width,\n    height,\n    spacing,\n    enableBeforeSeparators,\n    beforeSeparatorOffset,\n    enableAfterSeparators,\n    afterSeparatorOffset,\n}: {\n    parts: FunnelPart<D>[]\n    direction: FunnelCommonProps<D>['direction']\n    width: number\n    height: number\n    spacing: number\n    enableBeforeSeparators: boolean\n    beforeSeparatorOffset: number\n    enableAfterSeparators: boolean\n    afterSeparatorOffset: number\n}) => {\n    const beforeSeparators: SeparatorProps[] = []\n    const afterSeparators: SeparatorProps[] = []\n    const lastPart = parts[parts.length - 1]\n\n    if (direction === 'vertical') {\n        parts.forEach(part => {\n            const y = part.y0 - spacing / 2\n\n            if (enableBeforeSeparators) {\n                beforeSeparators.push({\n                    partId: part.data.id,\n                    x0: 0,\n                    x1: part.x0 - beforeSeparatorOffset,\n                    y0: y,\n                    y1: y,\n                })\n            }\n            if (enableAfterSeparators) {\n                afterSeparators.push({\n                    partId: part.data.id,\n                    x0: part.x1 + afterSeparatorOffset,\n                    x1: width,\n                    y0: y,\n                    y1: y,\n                })\n            }\n        })\n\n        const y = lastPart.y1\n        if (enableBeforeSeparators) {\n            beforeSeparators.push({\n                ...beforeSeparators[beforeSeparators.length - 1],\n                partId: 'none',\n                y0: y,\n                y1: y,\n            })\n        }\n        if (enableAfterSeparators) {\n            afterSeparators.push({\n                ...afterSeparators[afterSeparators.length - 1],\n                partId: 'none',\n                y0: y,\n                y1: y,\n            })\n        }\n    } else if (direction === 'horizontal') {\n        parts.forEach(part => {\n            const x = part.x0 - spacing / 2\n\n            beforeSeparators.push({\n                partId: part.data.id,\n                x0: x,\n                x1: x,\n                y0: 0,\n                y1: part.y0 - beforeSeparatorOffset,\n            })\n            afterSeparators.push({\n                partId: part.data.id,\n                x0: x,\n                x1: x,\n                y0: part.y1 + afterSeparatorOffset,\n                y1: height,\n            })\n        })\n\n        const x = lastPart.x1\n        beforeSeparators.push({\n            ...beforeSeparators[beforeSeparators.length - 1],\n            partId: 'none',\n            x0: x,\n            x1: x,\n        })\n        afterSeparators.push({\n            ...afterSeparators[afterSeparators.length - 1],\n            partId: 'none',\n            x0: x,\n            x1: x,\n        })\n    }\n\n    return [beforeSeparators, afterSeparators]\n}\n\nexport const computePartsHandlers = <D extends FunnelDatum>({\n    parts,\n    setCurrentPartId,\n    isInteractive,\n    onMouseEnter,\n    onMouseLeave,\n    onMouseMove,\n    onClick,\n    showTooltipFromEvent,\n    hideTooltip,\n    tooltip = PartTooltip,\n}: {\n    parts: FunnelPart<D>[]\n    setCurrentPartId: (id: string | number | null) => void\n    isInteractive: FunnelCommonProps<D>['isInteractive']\n    onMouseEnter?: FunnelCommonProps<D>['onMouseEnter']\n    onMouseLeave?: FunnelCommonProps<D>['onMouseLeave']\n    onMouseMove?: FunnelCommonProps<D>['onMouseMove']\n    onClick?: FunnelCommonProps<D>['onClick']\n    showTooltipFromEvent: TooltipActionsContextData['showTooltipFromEvent']\n    hideTooltip: () => void\n    tooltip?: (props: PartTooltipProps<D>) => JSX.Element\n}) => {\n    if (!isInteractive) return parts\n\n    return parts.map(part => {\n        const boundOnMouseEnter = (event: MouseEvent) => {\n            setCurrentPartId(part.data.id)\n            showTooltipFromEvent(createElement(tooltip, { part }), event)\n            onMouseEnter !== undefined && onMouseEnter(part, event)\n        }\n\n        const boundOnMouseLeave = (event: MouseEvent) => {\n            setCurrentPartId(null)\n            hideTooltip()\n            onMouseLeave !== undefined && onMouseLeave(part, event)\n        }\n\n        const boundOnMouseMove = (event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, { part }), event)\n            onMouseMove !== undefined && onMouseMove(part, event)\n        }\n\n        const boundOnClick =\n            onClick !== undefined\n                ? (event: MouseEvent) => {\n                      onClick(part, event)\n                  }\n                : undefined\n\n        return {\n            ...part,\n            onMouseEnter: boundOnMouseEnter,\n            onMouseLeave: boundOnMouseLeave,\n            onMouseMove: boundOnMouseMove,\n            onClick: boundOnClick,\n        }\n    })\n}\n\n/**\n * Creates required layout to generate a funnel chart,\n * it uses almost the same parameters as the Funnel component.\n *\n * For purpose/constrains on the parameters, please have a look\n * at the component's props.\n */\nexport const useFunnel = <D extends FunnelDatum>({\n    data,\n    width,\n    height,\n    direction = defaults.direction,\n    interpolation = defaults.interpolation,\n    spacing = defaults.spacing,\n    shapeBlending: rawShapeBlending = defaults.shapeBlending,\n    valueFormat,\n    colors = defaults.colors,\n    fillOpacity = defaults.fillOpacity,\n    borderWidth = defaults.borderWidth,\n    borderColor = defaults.borderColor,\n    borderOpacity = defaults.borderOpacity,\n    labelColor = defaults.labelColor,\n    enableBeforeSeparators = defaults.enableBeforeSeparators,\n    beforeSeparatorLength = defaults.beforeSeparatorLength,\n    beforeSeparatorOffset = defaults.beforeSeparatorOffset,\n    enableAfterSeparators = defaults.enableAfterSeparators,\n    afterSeparatorLength = defaults.afterSeparatorLength,\n    afterSeparatorOffset = defaults.afterSeparatorOffset,\n    isInteractive = defaults.isInteractive,\n    currentPartSizeExtension = defaults.currentPartSizeExtension,\n    currentBorderWidth,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n}: {\n    data: FunnelDataProps<D>['data']\n    width: number\n    height: number\n    direction?: FunnelCommonProps<D>['direction']\n    interpolation?: FunnelCommonProps<D>['interpolation']\n    spacing?: FunnelCommonProps<D>['spacing']\n    shapeBlending?: FunnelCommonProps<D>['shapeBlending']\n    valueFormat?: FunnelCommonProps<D>['valueFormat']\n    colors?: FunnelCommonProps<D>['colors']\n    fillOpacity?: FunnelCommonProps<D>['fillOpacity']\n    borderWidth?: FunnelCommonProps<D>['borderWidth']\n    borderColor?: FunnelCommonProps<D>['borderColor']\n    borderOpacity?: FunnelCommonProps<D>['borderOpacity']\n    labelColor?: FunnelCommonProps<D>['labelColor']\n    enableBeforeSeparators?: FunnelCommonProps<D>['enableBeforeSeparators']\n    beforeSeparatorLength?: FunnelCommonProps<D>['beforeSeparatorLength']\n    beforeSeparatorOffset?: FunnelCommonProps<D>['beforeSeparatorOffset']\n    enableAfterSeparators?: FunnelCommonProps<D>['enableAfterSeparators']\n    afterSeparatorLength?: FunnelCommonProps<D>['afterSeparatorLength']\n    afterSeparatorOffset?: FunnelCommonProps<D>['afterSeparatorOffset']\n    isInteractive?: FunnelCommonProps<D>['isInteractive']\n    currentPartSizeExtension?: FunnelCommonProps<D>['currentPartSizeExtension']\n    currentBorderWidth?: FunnelCommonProps<D>['currentBorderWidth']\n    onMouseEnter?: FunnelCommonProps<D>['onMouseEnter']\n    onMouseMove?: FunnelCommonProps<D>['onMouseMove']\n    onMouseLeave?: FunnelCommonProps<D>['onMouseLeave']\n    onClick?: FunnelCommonProps<D>['onClick']\n    tooltip?: (props: PartTooltipProps<D>) => JSX.Element\n}) => {\n    const theme = useTheme()\n    const getColor = useOrdinalColorScale<D>(colors, 'id')\n    const getBorderColor = useInheritedColor(borderColor, theme)\n    const getLabelColor = useInheritedColor(labelColor, theme)\n\n    const formatValue = useValueFormatter<number>(valueFormat)\n\n    const [areaGenerator, borderGenerator] = useMemo(\n        () => computeShapeGenerators<D>(interpolation, direction),\n        [interpolation, direction]\n    )\n\n    let innerWidth: number\n    let innerHeight: number\n    const paddingBefore = enableBeforeSeparators ? beforeSeparatorLength + beforeSeparatorOffset : 0\n    const paddingAfter = enableAfterSeparators ? afterSeparatorLength + afterSeparatorOffset : 0\n    if (direction === 'vertical') {\n        innerWidth = width - paddingBefore - paddingAfter\n        innerHeight = height\n    } else {\n        innerWidth = width\n        innerHeight = height - paddingBefore - paddingAfter\n    }\n\n    const [bandScale, linearScale] = useMemo(\n        () =>\n            computeScales<D>({\n                data,\n                direction,\n                width: innerWidth,\n                height: innerHeight,\n                spacing,\n            }),\n        [data, direction, innerWidth, innerHeight, spacing]\n    )\n\n    const [currentPartId, setCurrentPartId] = useState<string | number | null>(null)\n\n    const parts: FunnelPart<D>[] = useMemo(() => {\n        const enhancedParts = data.map((datum, index) => {\n            const isCurrent = datum.id === currentPartId\n\n            let partWidth\n            let partHeight\n            let y0, x0\n\n            if (direction === 'vertical') {\n                partWidth = linearScale(datum.value)\n                partHeight = bandScale.bandwidth\n                x0 = paddingBefore + (innerWidth - partWidth) * 0.5\n                y0 = bandScale(index)\n            } else {\n                partWidth = bandScale.bandwidth\n                partHeight = linearScale(datum.value)\n                x0 = bandScale(index)\n                y0 = paddingBefore + (innerHeight - partHeight) * 0.5\n            }\n\n            const x1 = x0 + partWidth\n            const x = x0 + partWidth * 0.5\n            const y1 = y0 + partHeight\n            const y = y0 + partHeight * 0.5\n\n            const part: FunnelPart<D> = {\n                data: datum,\n                width: partWidth,\n                height: partHeight,\n                color: getColor(datum),\n                fillOpacity,\n                borderWidth:\n                    isCurrent && currentBorderWidth !== undefined\n                        ? currentBorderWidth\n                        : borderWidth,\n                borderOpacity,\n                formattedValue: formatValue(datum.value),\n                isCurrent,\n                x,\n                x0,\n                x1,\n                y,\n                y0,\n                y1,\n                borderColor: '',\n                labelColor: '',\n                points: [],\n                areaPoints: [],\n                borderPoints: [],\n            }\n\n            part.borderColor = getBorderColor(part)\n            part.labelColor = getLabelColor(part)\n\n            return part\n        })\n\n        const shapeBlending = rawShapeBlending / 2\n\n        enhancedParts.forEach((part, index) => {\n            const nextPart = enhancedParts[index + 1]\n\n            if (direction === 'vertical') {\n                part.points.push({ x: part.x0, y: part.y0 })\n                part.points.push({ x: part.x1, y: part.y0 })\n                if (nextPart) {\n                    part.points.push({ x: nextPart.x1, y: part.y1 })\n                    part.points.push({ x: nextPart.x0, y: part.y1 })\n                } else {\n                    part.points.push({ x: part.points[1].x, y: part.y1 })\n                    part.points.push({ x: part.points[0].x, y: part.y1 })\n                }\n                if (part.isCurrent) {\n                    part.points[0].x -= currentPartSizeExtension\n                    part.points[1].x += currentPartSizeExtension\n                    part.points[2].x += currentPartSizeExtension\n                    part.points[3].x -= currentPartSizeExtension\n                }\n\n                part.areaPoints = [\n                    {\n                        x: 0,\n                        x0: part.points[0].x,\n                        x1: part.points[1].x,\n                        y: part.y0,\n                        y0: 0,\n                        y1: 0,\n                    },\n                ]\n                part.areaPoints.push({\n                    ...part.areaPoints[0],\n                    y: part.y0 + part.height * shapeBlending,\n                })\n                const lastAreaPoint = {\n                    x: 0,\n                    x0: part.points[3].x,\n                    x1: part.points[2].x,\n                    y: part.y1,\n                    y0: 0,\n                    y1: 0,\n                }\n                part.areaPoints.push({\n                    ...lastAreaPoint,\n                    y: part.y1 - part.height * shapeBlending,\n                })\n                part.areaPoints.push(lastAreaPoint)\n                ;[0, 1, 2, 3].map(index => {\n                    part.borderPoints.push({\n                        x: part.areaPoints[index].x0,\n                        y: part.areaPoints[index].y,\n                    })\n                })\n                part.borderPoints.push(null)\n                ;[3, 2, 1, 0].map(index => {\n                    part.borderPoints.push({\n                        x: part.areaPoints[index].x1,\n                        y: part.areaPoints[index].y,\n                    })\n                })\n            } else {\n                part.points.push({ x: part.x0, y: part.y0 })\n                if (nextPart) {\n                    part.points.push({ x: part.x1, y: nextPart.y0 })\n                    part.points.push({ x: part.x1, y: nextPart.y1 })\n                } else {\n                    part.points.push({ x: part.x1, y: part.y0 })\n                    part.points.push({ x: part.x1, y: part.y1 })\n                }\n                part.points.push({ x: part.x0, y: part.y1 })\n                if (part.isCurrent) {\n                    part.points[0].y -= currentPartSizeExtension\n                    part.points[1].y -= currentPartSizeExtension\n                    part.points[2].y += currentPartSizeExtension\n                    part.points[3].y += currentPartSizeExtension\n                }\n\n                part.areaPoints = [\n                    {\n                        x: part.x0,\n                        x0: 0,\n                        x1: 0,\n                        y: 0,\n                        y0: part.points[0].y,\n                        y1: part.points[3].y,\n                    },\n                ]\n                part.areaPoints.push({\n                    ...part.areaPoints[0],\n                    x: part.x0 + part.width * shapeBlending,\n                })\n                const lastAreaPoint = {\n                    x: part.x1,\n                    x0: 0,\n                    x1: 0,\n                    y: 0,\n                    y0: part.points[1].y,\n                    y1: part.points[2].y,\n                }\n                part.areaPoints.push({\n                    ...lastAreaPoint,\n                    x: part.x1 - part.width * shapeBlending,\n                })\n                part.areaPoints.push(lastAreaPoint)\n                ;[0, 1, 2, 3].map(index => {\n                    part.borderPoints.push({\n                        x: part.areaPoints[index].x,\n                        y: part.areaPoints[index].y0,\n                    })\n                })\n                part.borderPoints.push(null)\n                ;[3, 2, 1, 0].map(index => {\n                    part.borderPoints.push({\n                        x: part.areaPoints[index].x,\n                        y: part.areaPoints[index].y1,\n                    })\n                })\n            }\n        })\n\n        return enhancedParts\n    }, [\n        data,\n        direction,\n        linearScale,\n        bandScale,\n        innerWidth,\n        innerHeight,\n        paddingBefore,\n        paddingAfter,\n        rawShapeBlending,\n        getColor,\n        formatValue,\n        getBorderColor,\n        getLabelColor,\n        currentPartId,\n    ])\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n    const partsWithHandlers = useMemo(\n        () =>\n            computePartsHandlers<D>({\n                parts,\n                setCurrentPartId,\n                isInteractive,\n                onMouseEnter,\n                onMouseLeave,\n                onMouseMove,\n                onClick,\n                showTooltipFromEvent,\n                hideTooltip,\n                tooltip,\n            }),\n        [\n            parts,\n            setCurrentPartId,\n            isInteractive,\n            onMouseEnter,\n            onMouseLeave,\n            onMouseMove,\n            onClick,\n            showTooltipFromEvent,\n            hideTooltip,\n            tooltip,\n        ]\n    )\n\n    const [beforeSeparators, afterSeparators] = useMemo(\n        () =>\n            computeSeparators({\n                parts,\n                direction,\n                width,\n                height,\n                spacing,\n                enableBeforeSeparators,\n                beforeSeparatorOffset,\n                enableAfterSeparators,\n                afterSeparatorOffset,\n            }),\n        [\n            parts,\n            direction,\n            width,\n            height,\n            spacing,\n            enableBeforeSeparators,\n            beforeSeparatorOffset,\n            enableAfterSeparators,\n            afterSeparatorOffset,\n        ]\n    )\n\n    const customLayerProps: FunnelCustomLayerProps<D> = useMemo(\n        () => ({\n            width,\n            height,\n            parts: partsWithHandlers,\n            areaGenerator,\n            borderGenerator,\n            beforeSeparators,\n            afterSeparators,\n            setCurrentPartId,\n        }),\n        [\n            width,\n            height,\n            partsWithHandlers,\n            areaGenerator,\n            borderGenerator,\n            beforeSeparators,\n            afterSeparators,\n            setCurrentPartId,\n        ]\n    )\n\n    return {\n        parts: partsWithHandlers,\n        areaGenerator,\n        borderGenerator,\n        beforeSeparators,\n        afterSeparators,\n        setCurrentPartId,\n        currentPartId,\n        customLayerProps,\n    }\n}\n\nexport const useFunnelAnnotations = <D extends FunnelDatum>(\n    parts: FunnelPart<D>[],\n    annotations: FunnelCommonProps<D>['annotations']\n) =>\n    useAnnotations<FunnelPart<D>>({\n        data: parts,\n        annotations,\n        getPosition: part => ({\n            x: part.x,\n            y: part.y,\n        }),\n        getDimensions: (part: FunnelPart<D>) => {\n            const width = part.width\n            const height = part.height\n\n            return { size: Math.max(width, height), width, height }\n        },\n    })\n","import {path} from \"d3-path\";\nimport constant from \"./constant.js\";\nimport curveLinear from \"./curve/linear.js\";\nimport line from \"./line.js\";\nimport {x as pointX, y as pointY} from \"./point.js\";\n\nexport default function() {\n  var x0 = pointX,\n      x1 = null,\n      y0 = constant(0),\n      y1 = pointY,\n      defined = constant(true),\n      context = null,\n      curve = curveLinear,\n      output = null;\n\n  function area(data) {\n    var i,\n        j,\n        k,\n        n = data.length,\n        d,\n        defined0 = false,\n        buffer,\n        x0z = new Array(n),\n        y0z = new Array(n);\n\n    if (context == null) output = curve(buffer = path());\n\n    for (i = 0; i <= n; ++i) {\n      if (!(i < n && defined(d = data[i], i, data)) === defined0) {\n        if (defined0 = !defined0) {\n          j = i;\n          output.areaStart();\n          output.lineStart();\n        } else {\n          output.lineEnd();\n          output.lineStart();\n          for (k = i - 1; k >= j; --k) {\n            output.point(x0z[k], y0z[k]);\n          }\n          output.lineEnd();\n          output.areaEnd();\n        }\n      }\n      if (defined0) {\n        x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);\n        output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);\n      }\n    }\n\n    if (buffer) return output = null, buffer + \"\" || null;\n  }\n\n  function arealine() {\n    return line().defined(defined).curve(curve).context(context);\n  }\n\n  area.x = function(_) {\n    return arguments.length ? (x0 = typeof _ === \"function\" ? _ : constant(+_), x1 = null, area) : x0;\n  };\n\n  area.x0 = function(_) {\n    return arguments.length ? (x0 = typeof _ === \"function\" ? _ : constant(+_), area) : x0;\n  };\n\n  area.x1 = function(_) {\n    return arguments.length ? (x1 = _ == null ? null : typeof _ === \"function\" ? _ : constant(+_), area) : x1;\n  };\n\n  area.y = function(_) {\n    return arguments.length ? (y0 = typeof _ === \"function\" ? _ : constant(+_), y1 = null, area) : y0;\n  };\n\n  area.y0 = function(_) {\n    return arguments.length ? (y0 = typeof _ === \"function\" ? _ : constant(+_), area) : y0;\n  };\n\n  area.y1 = function(_) {\n    return arguments.length ? (y1 = _ == null ? null : typeof _ === \"function\" ? _ : constant(+_), area) : y1;\n  };\n\n  area.lineX0 =\n  area.lineY0 = function() {\n    return arealine().x(x0).y(y0);\n  };\n\n  area.lineY1 = function() {\n    return arealine().x(x0).y(y1);\n  };\n\n  area.lineX1 = function() {\n    return arealine().x(x1).y(y0);\n  };\n\n  area.defined = function(_) {\n    return arguments.length ? (defined = typeof _ === \"function\" ? _ : constant(!!_), area) : defined;\n  };\n\n  area.curve = function(_) {\n    return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;\n  };\n\n  area.context = function(_) {\n    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;\n  };\n\n  return area;\n}\n","import { useSpring, animated } from '@react-spring/web'\nimport { useAnimatedPath, useMotionConfig } from '@nivo/core'\nimport {\n    FunnelDatum,\n    FunnelPartWithHandlers,\n    FunnelAreaGenerator,\n    FunnelBorderGenerator,\n} from './types'\n\nexport interface PartProps<D extends FunnelDatum> {\n    part: FunnelPartWithHandlers<D>\n    areaGenerator: FunnelAreaGenerator\n    borderGenerator: FunnelBorderGenerator\n}\n\nexport const Part = <D extends FunnelDatum>({\n    part,\n    areaGenerator,\n    borderGenerator,\n}: PartProps<D>) => {\n    const { animate, config: motionConfig } = useMotionConfig()\n\n    const animatedAreaPath = useAnimatedPath(areaGenerator(part.areaPoints) as string)\n    const animatedBorderPath = useAnimatedPath(borderGenerator(part.borderPoints) as string)\n    const animatedProps = useSpring({\n        areaColor: part.color,\n        borderWidth: part.borderWidth,\n        borderColor: part.borderColor,\n        config: motionConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {part.borderWidth > 0 && (\n                <animated.path\n                    d={animatedBorderPath}\n                    stroke={animatedProps.borderColor}\n                    strokeWidth={animatedProps.borderWidth}\n                    strokeOpacity={part.borderOpacity}\n                    fill=\"none\"\n                />\n            )}\n            <animated.path\n                d={animatedAreaPath}\n                fill={animatedProps.areaColor}\n                fillOpacity={part.fillOpacity}\n                onMouseEnter={part.onMouseEnter}\n                onMouseLeave={part.onMouseLeave}\n                onMouseMove={part.onMouseMove}\n                onClick={part.onClick}\n            />\n        </>\n    )\n}\n","import { Part } from './Part'\nimport {\n    FunnelPartWithHandlers,\n    FunnelAreaGenerator,\n    FunnelBorderGenerator,\n    FunnelDatum,\n} from './types'\n\ninterface PartsProps<D extends FunnelDatum> {\n    parts: FunnelPartWithHandlers<D>[]\n    areaGenerator: FunnelAreaGenerator\n    borderGenerator: FunnelBorderGenerator\n}\n\nexport const Parts = <D extends FunnelDatum>({\n    parts,\n    areaGenerator,\n    borderGenerator,\n}: PartsProps<D>) => (\n    <>\n        {parts.map(part => (\n            <Part<D>\n                key={part.data.id}\n                part={part}\n                areaGenerator={areaGenerator}\n                borderGenerator={borderGenerator}\n            />\n        ))}\n    </>\n)\n","import { useSpring, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { FunnelDatum, FunnelPart } from './types'\n\ninterface PartLabelProps<D extends FunnelDatum> {\n    part: FunnelPart<D>\n}\n\nexport const PartLabel = <D extends FunnelDatum>({ part }: PartLabelProps<D>) => {\n    const theme = useTheme()\n    const { animate, config: motionConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        transform: `translate(${part.x}, ${part.y})`,\n        color: part.labelColor,\n        config: motionConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.g transform={animatedProps.transform}>\n            <animated.text\n                textAnchor=\"middle\"\n                dominantBaseline=\"central\"\n                style={{\n                    ...theme.labels.text,\n                    fill: animatedProps.color,\n                    pointerEvents: 'none',\n                }}\n            >\n                {part.formattedValue}\n            </animated.text>\n        </animated.g>\n    )\n}\n","import { PartLabel } from './PartLabel'\nimport { FunnelDatum, FunnelPart } from './types'\n\ninterface PartLabelsProps<D extends FunnelDatum> {\n    parts: FunnelPart<D>[]\n}\n\nexport const PartLabels = <D extends FunnelDatum>({ parts }: PartLabelsProps<D>) => (\n    <>\n        {parts.map(part => (\n            <PartLabel key={part.data.id} part={part} />\n        ))}\n    </>\n)\n","import { useSpring, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { SeparatorProps as SeparatorType } from './types'\n\ninterface SeparatorProps {\n    separator: SeparatorType\n}\n\nexport const Separator = ({ separator }: SeparatorProps) => {\n    const theme = useTheme()\n    const { animate, config: motionConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x1: separator.x0,\n        x2: separator.x1,\n        y1: separator.y0,\n        y2: separator.y1,\n        config: motionConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.line\n            x1={animatedProps.x1}\n            x2={animatedProps.x2}\n            y1={animatedProps.y1}\n            y2={animatedProps.y2}\n            fill=\"none\"\n            {...(theme.grid.line as any)}\n        />\n    )\n}\n","import { Separator } from './Separator'\nimport { SeparatorProps as SeparatorType } from './types'\n\ninterface SeparatorsProps {\n    beforeSeparators: SeparatorType[]\n    afterSeparators: SeparatorType[]\n}\n\nexport const Separators = ({ beforeSeparators, afterSeparators }: SeparatorsProps) => (\n    <>\n        {beforeSeparators.map(separator => (\n            <Separator key={separator.partId} separator={separator} />\n        ))}\n        {afterSeparators.map(separator => (\n            <Separator key={separator.partId} separator={separator} />\n        ))}\n    </>\n)\n","import { Annotation } from '@nivo/annotations'\nimport { useFunnelAnnotations } from './hooks'\nimport { FunnelDatum, FunnelPart } from './types'\n\ninterface FunnelAnnotationsProps<D extends FunnelDatum> {\n    parts: FunnelPart<D>[]\n    annotations: any[]\n}\n\nexport const FunnelAnnotations = <D extends FunnelDatum>({\n    parts,\n    annotations,\n}: FunnelAnnotationsProps<D>) => {\n    const boundAnnotations = useFunnelAnnotations<D>(parts, annotations)\n\n    return (\n        <>\n            {boundAnnotations.map((annotation, i) => (\n                <Annotation key={i} {...annotation} />\n            ))}\n        </>\n    )\n}\n","import { createElement, Fragment, ReactNode } from 'react'\nimport { SvgWrapper, Container, useDimensions } from '@nivo/core'\nimport { svgDefaultProps } from './props'\nimport { useFunnel } from './hooks'\nimport { Parts } from './Parts'\nimport { PartLabels } from './PartLabels'\nimport { Separators } from './Separators'\nimport { FunnelAnnotations } from './FunnelAnnotations'\nimport { FunnelDatum, FunnelLayerId, FunnelSvgProps } from './types'\n\ntype InnerFunnelProps<D extends FunnelDatum> = Omit<\n    FunnelSvgProps<D>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerFunnel = <D extends FunnelDatum>({\n    data,\n    width,\n    height,\n    margin: partialMargin,\n    direction = svgDefaultProps.direction,\n    interpolation = svgDefaultProps.interpolation,\n    spacing = svgDefaultProps.spacing,\n    shapeBlending = svgDefaultProps.shapeBlending,\n    valueFormat,\n    colors = svgDefaultProps.colors,\n    fillOpacity = svgDefaultProps.fillOpacity,\n    borderWidth = svgDefaultProps.borderWidth,\n    borderColor = svgDefaultProps.borderColor,\n    borderOpacity = svgDefaultProps.borderOpacity,\n    enableLabel = svgDefaultProps.enableLabel,\n    labelColor = svgDefaultProps.labelColor,\n    enableBeforeSeparators = svgDefaultProps.enableBeforeSeparators,\n    beforeSeparatorLength = svgDefaultProps.beforeSeparatorLength,\n    beforeSeparatorOffset = svgDefaultProps.beforeSeparatorOffset,\n    enableAfterSeparators = svgDefaultProps.enableAfterSeparators,\n    afterSeparatorLength = svgDefaultProps.afterSeparatorLength,\n    afterSeparatorOffset = svgDefaultProps.afterSeparatorOffset,\n    layers = svgDefaultProps.layers,\n    annotations = svgDefaultProps.annotations,\n    isInteractive = svgDefaultProps.isInteractive,\n    currentPartSizeExtension = svgDefaultProps.currentPartSizeExtension,\n    currentBorderWidth,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n    role = svgDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: InnerFunnelProps<D>) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        areaGenerator,\n        borderGenerator,\n        parts,\n        beforeSeparators,\n        afterSeparators,\n        customLayerProps,\n    } = useFunnel<D>({\n        data,\n        width: innerWidth,\n        height: innerHeight,\n        direction,\n        interpolation,\n        spacing,\n        shapeBlending,\n        valueFormat,\n        colors,\n        fillOpacity,\n        borderWidth,\n        borderColor,\n        borderOpacity,\n        labelColor,\n        enableBeforeSeparators,\n        beforeSeparatorLength,\n        beforeSeparatorOffset,\n        enableAfterSeparators,\n        afterSeparatorLength,\n        afterSeparatorOffset,\n        isInteractive,\n        currentPartSizeExtension,\n        currentBorderWidth,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        tooltip,\n    })\n\n    const layerById: Record<FunnelLayerId, ReactNode> = {\n        separators: null,\n        parts: null,\n        annotations: null,\n        labels: null,\n    }\n\n    if (layers.includes('separators')) {\n        layerById.separators = (\n            <Separators\n                key=\"separators\"\n                beforeSeparators={beforeSeparators}\n                afterSeparators={afterSeparators}\n            />\n        )\n    }\n\n    if (layers.includes('parts')) {\n        layerById.parts = (\n            <Parts<D>\n                key=\"parts\"\n                parts={parts}\n                areaGenerator={areaGenerator}\n                borderGenerator={borderGenerator}\n            />\n        )\n    }\n\n    if (layers?.includes('annotations')) {\n        layerById.annotations = (\n            <FunnelAnnotations<D> key=\"annotations\" parts={parts} annotations={annotations} />\n        )\n    }\n\n    if (layers.includes('labels') && enableLabel) {\n        layerById.labels = <PartLabels<D> key=\"labels\" parts={parts} />\n    }\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Funnel = <D extends FunnelDatum = FunnelDatum>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: FunnelSvgProps<D>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerFunnel<D> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { FunnelDatum, FunnelSvgProps } from './types'\nimport { Funnel } from './Funnel'\n\nexport const ResponsiveFunnel = <D extends FunnelDatum = FunnelDatum>(\n    props: Omit<FunnelSvgProps<D>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Funnel<D> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n"],"names":["E","layers","direction","interpolation","spacing","shapeBlending","colors","scheme","fillOpacity","borderWidth","borderColor","from","borderOpacity","enableLabel","labelColor","theme","enableBeforeSeparators","beforeSeparatorLength","beforeSeparatorOffset","enableAfterSeparators","afterSeparatorLength","afterSeparatorOffset","annotations","isInteractive","currentPartSizeExtension","role","animate","a","motionConfig","W","r","e","part","O","P","id","data","label","value","formattedValue","color","enableChip","G","t","x0","pointX","x1","y0","constant","y1","pointY","defined","context","curve","curveLinear","output","area","i","j","k","d","buffer","n","length","defined0","x0z","Array","y0z","path","areaStart","lineStart","lineEnd","point","areaEnd","arealine","line","x","_","arguments","y","lineX0","lineY0","lineY1","lineX1","c","h","v","z","parts","o","setCurrentPartId","onMouseEnter","onMouseLeave","s","onMouseMove","p","onClick","l","showTooltipFromEvent","hideTooltip","u","tooltip","f","map","B","F","width","height","b","g","valueFormat","S","M","L","I","w","T","D","V","H","q","J","K","N","Q","R","U","X","Y","Z","$","rr","er","tr","currentBorderWidth","or","ar","nr","ir","sr","pr","lr","dr","m","ur","fr","cr","hr","vr","yr","br","xr","bandwidth","domain","Math","max","apply","range","mr","gr","Sr","Pr","Cr","Or","isCurrent","points","areaPoints","borderPoints","forEach","push","Mr","C","Lr","Ir","wr","Br","partId","A","Er","Wr","Gr","areaGenerator","borderGenerator","beforeSeparators","afterSeparators","currentPartId","customLayerProps","config","areaColor","immediate","children","stroke","strokeWidth","strokeOpacity","fill","transform","textAnchor","dominantBaseline","style","labels","text","pointerEvents","separator","x2","y2","grid","getPosition","getDimensions","size","margin","ariaLabel","ariaLabelledBy","ariaDescribedBy","innerWidth","innerHeight","outerWidth","outerHeight","separators","includes","renderWrapper","Object","keys","indexOf"],"sourceRoot":""}